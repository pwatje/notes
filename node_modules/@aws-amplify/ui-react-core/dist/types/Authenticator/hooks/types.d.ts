import React from 'react';
import { AuthChallengeName, AuthenticatorServiceFacade, LegacyFormFieldOptions } from '@aws-amplify/ui';
export declare type AuthenticatorRouteComponentKey = 'confirmResetPassword' | 'confirmSignIn' | 'confirmSignUp' | 'confirmVerifyUser' | 'forceNewPassword' | 'resetPassword' | 'setupTOTP' | 'signIn' | 'signUp' | 'verifyUser';
export declare type AuthenticatorLegacyField = LegacyFormFieldOptions;
export declare type AuthenticatorLegacyFields = AuthenticatorLegacyField[];
/**
 * These are the "facades" that we provide, which contains contexts respective
 * to current authenticator state.
 */
export declare type AuthenticatorMachineContext = AuthenticatorServiceFacade;
export declare type AuthenticatorMachineContextKey = keyof AuthenticatorMachineContext;
export declare type AuthenticatorRouteComponentName = Capitalize<AuthenticatorRouteComponentKey>;
export declare type GetTotpSecretCode = () => Promise<string>;
interface HeaderProps {
    children?: React.ReactNode;
}
interface FooterProps {
    children?: React.ReactNode;
}
declare type FormFieldsProps = {
    isPending: AuthenticatorMachineContext['isPending'];
    validationErrors?: AuthenticatorMachineContext['validationErrors'];
};
export declare type FooterComponent<Props = {}> = React.ComponentType<FooterProps & Props>;
export declare type FormFieldsComponent<FieldType, Props = {}> = React.ComponentType<FormFieldsProps & {
    fields: FieldType[];
} & Props>;
export declare type HeaderComponent<Props = {}> = React.ComponentType<HeaderProps & Props>;
export interface ComponentSlots<FieldType = {}> {
    Footer: FooterComponent;
    Header: HeaderComponent;
    FormFields: FormFieldsComponent<FieldType>;
}
/**
 * Common component prop types used for both RWA and RNA implementations
 */
export declare type CommonRouteProps = {
    error?: AuthenticatorMachineContext['error'];
    isPending: AuthenticatorMachineContext['isPending'];
    handleBlur: AuthenticatorMachineContext['updateBlur'];
    handleChange: AuthenticatorMachineContext['updateForm'];
    handleSubmit: AuthenticatorMachineContext['submitForm'];
};
/**
 * Base Route component props
 */
export declare type ConfirmResetPasswordBaseProps<FieldType = {}> = {
    resendCode: AuthenticatorMachineContext['resendCode'];
    validationErrors?: AuthenticatorMachineContext['validationErrors'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type ConfirmSignInBaseProps<FieldType = {}> = {
    challengeName: AuthChallengeName;
    toSignIn: AuthenticatorMachineContext['toSignIn'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type ConfirmSignUpBaseProps<FieldType = {}> = {
    codeDeliveryDetails: AuthenticatorMachineContext['codeDeliveryDetails'];
    resendCode: AuthenticatorMachineContext['resendCode'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type ConfirmVerifyUserProps<FieldType = {}> = {
    skipVerification: AuthenticatorMachineContext['skipVerification'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type ForceResetPasswordBaseProps<FieldType = {}> = {
    toSignIn: AuthenticatorMachineContext['toSignIn'];
    validationErrors?: AuthenticatorMachineContext['validationErrors'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type ResetPasswordBaseProps<FieldType = {}> = {
    toSignIn: AuthenticatorMachineContext['toSignIn'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type SetupTOTPBaseProps<FieldType = {}> = {
    getTotpSecretCode: GetTotpSecretCode;
    toSignIn: AuthenticatorMachineContext['toSignIn'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type SignInBaseProps<FieldType = {}> = {
    hideSignUp?: boolean;
    toFederatedSignIn: AuthenticatorMachineContext['toFederatedSignIn'];
    toResetPassword: AuthenticatorMachineContext['toResetPassword'];
    toSignUp: AuthenticatorMachineContext['toSignUp'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type SignUpBaseProps<FieldType = {}> = {
    hideSignIn?: boolean;
    toFederatedSignIn: AuthenticatorMachineContext['toFederatedSignIn'];
    toSignIn: AuthenticatorMachineContext['toSignIn'];
    validationErrors?: AuthenticatorMachineContext['validationErrors'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export declare type VerifyUserProps<FieldType = {}> = {
    skipVerification: AuthenticatorMachineContext['skipVerification'];
} & CommonRouteProps & ComponentSlots<FieldType>;
export interface DefaultProps<FieldType = {}> {
    ConfirmSignIn: ConfirmSignInBaseProps<FieldType>;
    ConfirmSignUp: ConfirmSignUpBaseProps<FieldType>;
    ConfirmResetPassword: ConfirmResetPasswordBaseProps<FieldType>;
    ConfirmVerifyUser: ConfirmVerifyUserProps<FieldType>;
    ForceNewPassword: ForceResetPasswordBaseProps<FieldType>;
    ResetPassword: ResetPasswordBaseProps<FieldType>;
    SetupTOTP: SetupTOTPBaseProps<FieldType>;
    SignIn: SignInBaseProps<FieldType>;
    SignUp: SignUpBaseProps<FieldType>;
    VerifyUser: VerifyUserProps<FieldType>;
}
/**
 * common types extended for default component types/implementations and override component types
 */
declare type BaseComponent<ComponentRouteProps = {}, FieldType = {}, Props = {}> = React.ComponentType<ComponentSlots<FieldType> & ComponentRouteProps & {
    fields: FieldType[];
} & Props>;
/**
 * Authenticator Route Component Default types
 */
export declare type Defaults<FieldType = {}, PlatformProps = {}> = {
    [Key in AuthenticatorRouteComponentName]: BaseComponent<DefaultProps<FieldType>[Key], FieldType, PlatformProps> & ComponentSlots<FieldType>;
};
export declare type Overrides<FieldType = {}, PlatformProps = {}> = {
    [Key in AuthenticatorRouteComponentName]?: BaseComponent<DefaultProps<FieldType>[Key], FieldType, PlatformProps>;
};
/**
 * Default Route Component union type
 */
export declare type DefaultComponentType<FieldType = {}> = Defaults<FieldType>[keyof Defaults<FieldType>];
/**
 * Default Route Component union type
 */
export declare type DefaultPropsType<FieldType = {}> = DefaultProps<FieldType>[keyof DefaultProps<FieldType>];
export {};
