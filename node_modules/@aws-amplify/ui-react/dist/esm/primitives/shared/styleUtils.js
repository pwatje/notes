import{__rest as o}from"tslib";import*as e from"react";import{ComponentPropsToStylePropsMap as r}from"../types/style.js";import{getValueAtCurrentBreakpoint as t}from"./responsive/utils.js";import{useBreakpoint as s}from"./responsive/useBreakpoint.js";import"../../components/ThemeProvider/AmplifyContext.js";import{useTheme as n}from"../../hooks/useTheme.js";import{isNullOrEmptyString as p,isEmptyString as a}from"./utils.js";const i=o=>"auto"===o||"number"==typeof o&&!isNaN(o)||"string"==typeof o&&!isNaN(parseFloat(o)),u=o=>"auto"===o?"auto":`span ${o}`,l=o=>{if(i(o))return u(o);if(Array.isArray(o))return o.map((o=>u(o)));if("object"==typeof o&&null!=o){const e={};return Object.entries(o).forEach((([o,r])=>{e[o]=u(r)})),e}return null},m=r=>{const{rowSpan:t,columnSpan:s,row:n,column:a}=r,i=o(r,["rowSpan","columnSpan","row","column"]),{rowFromSpanValue:u,columnFromSpanValue:m}=e.useMemo((()=>({rowFromSpanValue:l(t),columnFromSpanValue:l(s)})),[t,s]);return Object.assign({row:p(n)?u:n,column:p(a)?m:a},i)},c=({props:o={},style:e={},breakpoint:s,breakpoints:n,tokens:p})=>{const i={};return Object.keys(o).filter((e=>null!=o[e])).forEach((u=>{if(u in r){if(!a(o[u])){const a=o[u],i=r[u];e=Object.assign(Object.assign({},e),{[i]:t({values:a,breakpoint:s,breakpoints:n,propKey:u,tokens:p})})}}else i[u]=o[u]})),{propStyles:e,nonStyleProps:i}},f=(o,r)=>{const{breakpoints:{values:t,defaultBreakpoint:p},tokens:a}=n(),i=s({breakpoints:t,defaultBreakpoint:p}),u=m(o);return e.useMemo((()=>c({props:u,style:r,breakpoint:i,breakpoints:t,tokens:a})),[u,r,t,i,a])},k=o=>{const e={styleProps:{},rest:{}};return Object.keys(o).forEach((t=>{t in r?e.styleProps[t]=o[t]:e.rest[t]=o[t]})),e};export{l as convertGridSpan,c as convertStylePropsToStyleObj,u as getGridSpan,i as isSpanPrimitiveValue,k as splitPrimitiveProps,f as useStyles,m as useTransformStyleProps};
